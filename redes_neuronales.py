# -*- coding: utf-8 -*-
"""Redes neuronales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kx6zz2qNik51xIBpJ_n5SbooGPgn6xOM
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler


data = pd.read_excel('/content/Datos Hogares INE.xlsx')

"""# Definir variables de clasificación

Que tipo de tenencia se tiene de la vivienda(P02A07)
"""

data = data.sample(frac=1, random_state=42).reset_index(drop=True)
data = data.fillna(data.mode().iloc[0])  # Imputa con la moda

"""# Modelo 1

# Definición de variables dependientes e independientes
"""

# Material predominante del piso
 # Personas que reside habitualmente
 # Tratamiento al agua para beber
x = data[['P02A04', 'P01B04', 'P02B04']]
y = data['P02A07']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
y_train = y_train - 1
y_test = y_test - 1

"""# Diseño de la red neuronal


"""

model = Sequential()
model.add(Dense(15, input_dim=3, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(5, activation='softmax'))

"""# Compilación de red"""

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(x_train, y_train, epochs=50, batch_size=32, validation_data=(x_test, y_test))

"""# Presición del modelo"""

loss ,accuracy = model.evaluate(x_test, y_test)
print('Accuracy: %.2f' % (accuracy*100))

"""# Predicción"""

# 1ra prediccion
 # Material predominante del piso -> ladrillo de Cemento
 # Reside 4 persona habitualmente
 # Tratamiento al agua para beber -> Hervida
hogar = np.array([[2,4,2]])
p = model.predict(hogar)
print(p)
 # 2da prediccion
 # Material predominante del piso -> Ladrillo de Barro
 # Reside 2 persona habitualmente
 # Tratamiento al agua para beber -> Clorada
hogar = np.array([[3,2,4]])
p = model.predict(hogar)
print(p)
 # 3ra prediccion
 # Material predominante del piso -> Tierra
 # Reside 1 persona habitualmente
 # Tratamiento al agua para beber -> Ninguno
hogar = np.array([[8,1,1]])
p = model.predict(hogar)
print(p)

"""# Modelo 2

# Definir variables de clasificación

Que tipo de tenencia se tiene de la vivienda(P02A07)

# Definición de variables dependientes e independientes
"""

# Material predominante del piso
 # Tipo de servicio sanitario
 # Fuente de energia para cocinar
 # area geografico
x = data[['P02A04', 'P02B07', 'P02B05','areag']]
y = data['P02B04']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
y_train = y_train - 1
y_test = y_test - 1

"""# Diseño de la red neuronal


"""

model = Sequential()
model.add(Dense(15, input_dim=4, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(6, activation='softmax'))

"""# Compilación de red"""

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(x_train, y_train, epochs=50, batch_size=32, validation_data=(x_test, y_test))

"""# Presición del modelo"""

loss ,accuracy = model.evaluate(x_test, y_test)
print('Accuracy: %.2f' % (accuracy*100))

"""# Predicción"""

# 1ra prediccion
 # Material predominante del piso -> ladrillo de Cemento
 # Tipo de servicio sanitario ->Inodoro red drenaje
 # Fuente de energia para cocinar ->Propano
 # Area Urbano
hogar = np.array([[2,1,2,1]])
p = model.predict(hogar)
print(p)
 # 2da prediccion
 # Material predominante del piso -> Ladrillo de Barro
 # Tipo de servicio sanitario ->Letrina
 # Fuente de energia para cocinar ->Leña
 # Area rural
hogar = np.array([[3,4,4,2]])
p = model.predict(hogar)
print(p)
 # 3ra prediccion
 # Material predominante del piso -> Tierra
 # Tipo de servicio sanitario -> No tiene
 # Fuente de energia para cocinar ->Electricidad
  # Area rural
hogar = np.array([[8,5,1,2]])
p = model.predict(hogar)
print(p)